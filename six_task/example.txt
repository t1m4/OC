n = 16 элементов
p = 8 блоков
m = n / p = 2 #сколько элементов в блоках 
num = p / 2 + p % 2 = 4 + 0  = 4#кол-во дескрипторов, так как у каждого блока должна быть пара

for (int i = 0; i < num; i++)#передаем в начало каждого блока координаты блоков
    1) x = i * 2 * m = 0
       y = i * 2 * m + m = 2
    2) x = i * 2 * m = 4
       y = i * 2 * m + m = 6
    3) x = i * 2 * m = 8
       y = i * 2 * m + m = 10
    4) x = i * 2 * m = 12
       y = i * 2 * m + m = 14
func__1():
    1) x_i = 0; y_i = 2. 
	if x_i + m < n: sort(a+x_i+m) else: sort(a+n)
	if y_i + m < n: sort(a+y_i+m) elif y_i < n: sort(a+n)


Во вторую функцию передаем координаты начала блоков которые нужно сравнить
1) phase = 1 
        len = 1
	    0 2
	    4 6
	    8 10 
	    12 14
2) phase = 2 
	len = 2
	    0 4 -> 2 6
	    8 12 -> 10 14
	len = 1
	    2 4
	    10 12
3) phase = 4
	len = 4
	    0 8 -> 2 10 -> 4 12 -> 6 14
	len = 2 
	    4 8 -> 6 10
	len = 1 
	    2 4 
	    6 8
	    10 12


func_2():
    изменяет в массиве 2 блока

n = 16 p = 9 m = 1 s = 8
if n % p !=0:
    s = n / (m + 1) = 16 / 2 = 8 
    if (n % (s * (m + 1)) == 0): (16 % ( 8 * 2)) = 16 % 16 == 0 True
	p = s = 8

Если n делиться на s без остатка то нужно использовать s блоков, иначе s+1

n = 16 p = 11 m = 1 s = 8 +
n = 16 p = 10 m = 1 s = 8 + 
n = 16 p = 9 m = 1 s = 8 +
n = 16 p = 7 m = 2 s = 5 -  
n = 16 p = 6 m = 2 s = 5 - 
n = 16 p = 5 m = 3 s = 4 +       	 
n = 16 p = 3 m = 5 s = 3 -

n = 15 p = 8 m = 1 s = 7 + 
n = 15 p = 7 m = 2 s = 5 -  
n = 15 p = 6 m = 2 s = 5 + 
n = 15 p = 4 m = 3 s = 3 +	  

n = 9 p = 8 m = 1 s = 4 -
  
   
	
	

	